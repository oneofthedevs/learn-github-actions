name: "PUSH: Build Application"
on: [push]
jobs:
  # Different jobs runs on different enviroments parllel to each other, if you want to run then simutaneously then we need to use needs keyword
  build-job:
    runs-on: ubuntu-latest
    # Defining output parameters to share data between jobs
    outputs:
      # Syntex: steps.<step-id>.outputs.<variable-name>
      text: ${{ steps.final-step.outputs.text }}
    env:
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
    steps:
      - name: Fetching Node Image
        uses: actions/setup-node@v2
        with:
          node-version: 16
      # Why fetch?
      # Github Actions runs on a different enviroment which is not necessarily connected with the repo, think of it like a docker container
      # So in order to deploy the code, first fetch (clond) the repo in this github action enviroment and then create a build (Artifect)
      # which will later on be sent to Vercel (in this case, can be AWS or DigitalOcean, etc...)
      - name: Fetching Code from current repo
        uses: actions/checkout@v2
      - name: Installing dependencies
        run: npm install --production
      - name: Building the project
        run: npm run build
      - name: Deploy on Vercel
        run: |
          cd build
          yarn deploy-vc
      - name: DONE
        id: final-step
        run: |
          echo "::set-output name=text::hello-there-from-build-job" 
          echo "It's Done, it will always be done"
  test-job:
    # This job will only run after build is completed
    needs: build-job
    runs-on: ubuntu-latest
    env:
      # Defining a veriable which we'll recieve from dependent job
      # Syntex: needs.<job-name>.outputs.<variable-name>
      BUILD_OUTPUT: ${{ needs.build-job.outputs.text }}
    steps:
      - name: Say something
        run: echo "Please go to sleep"
  #These 2 jobs will run parallel to build-job as they are not dependent on anyone
  parallel-job-1:
    # OS image to run action on
    runs-on: ubuntu-latest
    # Steps - Each step will be run sequentially
    steps:
      - run: echo "Job 1-1"
      - run: echo "Job 1-2"
  parallel-job-2:
    # OS image to run action on
    runs-on: ubuntu-latest
    # Steps - Each step will be run sequentially
    steps:
      - run: echo "Job 2-1"
      - run: echo "Job 2-2"
